#ifndef FREETYPE_INTERFACE_DEF_H
#define FREETYPE_INTERFACE_DEF_H

/*
** This file was machine generated by idltool.py 54.8.
** Do not edit.
*/

#include <exec/types.h>
#include <exec/exec.h>
#include <exec/interfaces.h>

#include <freetype/freetype.h>
#include <freetype/ftbdf.h>
#include <freetype/ftcache.h>
#include <freetype/ftcolor.h>
#include <freetype/ftgxval.h>
#include <freetype/ftlcdfil.h>
#include <freetype/ftlist.h>
#include <freetype/ftlogging.h>
#include <freetype/ftmm.h>
#include <freetype/ftmodapi.h>
#include <freetype/ftoutln.h>
#include <freetype/ftsnames.h>
#include <freetype/ftstroke.h>
#include <freetype/fttrigon.h>
#include <freetype/ftwinfnt.h>
#include <freetype/t1tables.h>
#include <freetype/tttables.h>

#ifdef __cplusplus
#ifdef __USE_AMIGAOS_NAMESPACE__
namespace AmigaOS {
#endif
extern "C" {
#endif

struct FreetypeIFace
{
	struct InterfaceData Data;

	uint32 APICALL (*Obtain)(struct FreetypeIFace *Self);
	uint32 APICALL (*Release)(struct FreetypeIFace *Self);
	APTR Expunge_UNIMPLEMENTED;
	APTR Clone_UNIMPLEMENTED;
	FT_Error APICALL (*FT_Init_FreeType)(struct FreetypeIFace *Self, FT_Library * alibrary);
	FT_Error APICALL (*FT_Done_FreeType)(struct FreetypeIFace *Self, FT_Library library);
	FT_Error APICALL (*FT_New_Face)(struct FreetypeIFace *Self, FT_Library library, const char* filepathname, FT_Long face_index, FT_Face * aface);
	FT_Error APICALL (*FT_New_Memory_Face)(struct FreetypeIFace *Self, FT_Library library, const FT_Byte* file_base, FT_Long file_size, FT_Long face_index, FT_Face * aface);
	FT_Error APICALL (*FT_Open_Face)(struct FreetypeIFace *Self, FT_Library library, const FT_Open_Args* args, FT_Long face_index, FT_Face * aface);
	FT_Error APICALL (*FT_Attach_File)(struct FreetypeIFace *Self, FT_Face face, const char* filepathname);
	FT_Error APICALL (*FT_Attach_Stream)(struct FreetypeIFace *Self, FT_Face face, const FT_Open_Args* parameters);
	FT_Error APICALL (*FT_Reference_Face)(struct FreetypeIFace *Self, FT_Face face);
	FT_Error APICALL (*FT_Done_Face)(struct FreetypeIFace *Self, FT_Face face);
	FT_Error APICALL (*FT_Select_Size)(struct FreetypeIFace *Self, FT_Face face, FT_Int strike_index);
	FT_Error APICALL (*FT_Request_Size)(struct FreetypeIFace *Self, FT_Face face, FT_Size_Request req);
	FT_Error APICALL (*FT_Set_Char_Size)(struct FreetypeIFace *Self, FT_Face face, FT_F26Dot6 char_width, FT_F26Dot6 char_height, FT_UInt horz_resolution, FT_UInt vert_resolution);
	FT_Error APICALL (*FT_Set_Pixel_Sizes)(struct FreetypeIFace *Self, FT_Face face, FT_UInt pixel_width, FT_UInt pixel_height);
	FT_Error APICALL (*FT_Load_Glyph)(struct FreetypeIFace *Self, FT_Face face, FT_UInt glyph_index, FT_Int32 load_flags);
	FT_Error APICALL (*FT_Load_Char)(struct FreetypeIFace *Self, FT_Face face, FT_ULong char_code, FT_Int32 load_flags);
	void APICALL (*FT_Set_Transform)(struct FreetypeIFace *Self, FT_Face face, FT_Matrix* matrix, FT_Vector* delta);
	void APICALL (*FT_Get_Transform)(struct FreetypeIFace *Self, FT_Face face, FT_Matrix* matrix, FT_Vector* delta);
	FT_Error APICALL (*FT_Render_Glyph)(struct FreetypeIFace *Self, FT_GlyphSlot slot, FT_Render_Mode render_mode);
	FT_Error APICALL (*FT_Get_Kerning)(struct FreetypeIFace *Self, FT_Face face, FT_UInt left_glyph, FT_UInt right_glyph, FT_UInt kern_mode, FT_Vector * akerning);
	FT_Error APICALL (*FT_Get_Track_Kerning)(struct FreetypeIFace *Self, FT_Face face, FT_Fixed point_size, FT_Int degree, FT_Fixed* akerning);
	FT_Error APICALL (*FT_Select_Charmap)(struct FreetypeIFace *Self, FT_Face face, FT_Encoding encoding);
	FT_Error APICALL (*FT_Set_Charmap)(struct FreetypeIFace *Self, FT_Face face, FT_CharMap charmap);
	FT_Int APICALL (*FT_Get_Charmap_Index)(struct FreetypeIFace *Self, FT_CharMap charmap);
	FT_UInt APICALL (*FT_Get_Char_Index)(struct FreetypeIFace *Self, FT_Face face, FT_ULong charcode);
	FT_ULong APICALL (*FT_Get_First_Char)(struct FreetypeIFace *Self, FT_Face face, FT_UInt * agindex);
	FT_ULong APICALL (*FT_Get_Next_Char)(struct FreetypeIFace *Self, FT_Face face, FT_ULong char_code, FT_UInt * agindex);
	FT_Error APICALL (*FT_Face_Properties)(struct FreetypeIFace *Self, FT_Face face, FT_UInt num_properties, FT_Parameter* properties);
	FT_UInt APICALL (*FT_Get_Name_Index)(struct FreetypeIFace *Self, FT_Face face, const FT_String* glyph_name);
	FT_Error APICALL (*FT_Get_Glyph_Name)(struct FreetypeIFace *Self, FT_Face face, FT_UInt glyph_index, FT_Pointer buffer, FT_UInt buffer_max);
	const char* APICALL (*FT_Get_Postscript_Name)(struct FreetypeIFace *Self, FT_Face face);
	FT_Error APICALL (*FT_Get_SubGlyph_Info)(struct FreetypeIFace *Self, FT_GlyphSlot glyph, FT_UInt sub_index, FT_Int * p_index, FT_UInt * p_flags, FT_Int * p_arg1, FT_Int * p_arg2, FT_Matrix * p_transform);
	FT_UShort APICALL (*FT_Get_FSType_Flags)(struct FreetypeIFace *Self, FT_Face face);
	FT_UInt APICALL (*FT_Face_GetCharVariantIndex)(struct FreetypeIFace *Self, FT_Face face, FT_ULong charcode, FT_ULong variantSelector);
	FT_Int APICALL (*FT_Face_GetCharVariantIsDefault)(struct FreetypeIFace *Self, FT_Face face, FT_ULong charcode, FT_ULong variantSelector);
	FT_UInt32* APICALL (*FT_Face_GetVariantSelectors)(struct FreetypeIFace *Self, FT_Face face);
	FT_UInt32* APICALL (*FT_Face_GetVariantsOfChar)(struct FreetypeIFace *Self, FT_Face face, FT_ULong charcode);
	FT_UInt32* APICALL (*FT_Face_GetCharsOfVariant)(struct FreetypeIFace *Self, FT_Face face, FT_ULong variantSelector);
	FT_Long APICALL (*FT_MulDiv)(struct FreetypeIFace *Self, FT_Long a, FT_Long b, FT_Long c);
	FT_Long APICALL (*FT_MulFix)(struct FreetypeIFace *Self, FT_Long a, FT_Long b);
	FT_Long APICALL (*FT_DivFix)(struct FreetypeIFace *Self, FT_Long a, FT_Long b);
	FT_Fixed APICALL (*FT_RoundFix)(struct FreetypeIFace *Self, FT_Fixed a);
	FT_Fixed APICALL (*FT_CeilFix)(struct FreetypeIFace *Self, FT_Fixed a);
	FT_Fixed APICALL (*FT_FloorFix)(struct FreetypeIFace *Self, FT_Fixed a);
	void APICALL (*FT_Vector_Transform)(struct FreetypeIFace *Self, FT_Vector* vector, const FT_Matrix* matrix);
	void APICALL (*FT_Library_Version)(struct FreetypeIFace *Self, FT_Library library, FT_Int * amajor, FT_Int * aminor, FT_Int * apatch);
	FT_Bool APICALL (*FT_Face_CheckTrueTypePatents)(struct FreetypeIFace *Self, FT_Face face);
	FT_Bool APICALL (*FT_Face_SetUnpatentedHinting)(struct FreetypeIFace *Self, FT_Face face, FT_Bool value);
	FT_Error APICALL (*FT_Get_Advance)(struct FreetypeIFace *Self, FT_Face face, FT_UInt gindex, FT_Int32 load_flags, FT_Fixed * padvance);
	FT_Error APICALL (*FT_Get_Advances)(struct FreetypeIFace *Self, FT_Face face, FT_UInt start, FT_UInt count, FT_Int32 load_flags, FT_Fixed * padvances);
	FT_Error APICALL (*FT_Outline_Get_BBox)(struct FreetypeIFace *Self, FT_Outline* outline, FT_BBox * abbox);
	FT_Error APICALL (*FT_Get_BDF_Charset_ID)(struct FreetypeIFace *Self, FT_Face face, const char* * acharset_encoding, const char* * acharset_registry);
	FT_Error APICALL (*FT_Get_BDF_Property)(struct FreetypeIFace *Self, FT_Face face, const char* prop_name, BDF_PropertyRec * aproperty);
	void APICALL (*FT_Bitmap_Init)(struct FreetypeIFace *Self, FT_Bitmap * abitmap);
	void APICALL (*FT_Bitmap_New)(struct FreetypeIFace *Self, FT_Bitmap * abitmap);
	FT_Error APICALL (*FT_Bitmap_Copy)(struct FreetypeIFace *Self, FT_Library library, const FT_Bitmap * source, FT_Bitmap * target);
	FT_Error APICALL (*FT_Bitmap_Embolden)(struct FreetypeIFace *Self, FT_Library library, FT_Bitmap* bitmap, FT_Pos xStrength, FT_Pos yStrength);
	FT_Error APICALL (*FT_Bitmap_Convert)(struct FreetypeIFace *Self, FT_Library library, const FT_Bitmap * source, FT_Bitmap * target, FT_Int alignment);
	FT_Error APICALL (*FT_Bitmap_Blend)(struct FreetypeIFace *Self, FT_Library library, const FT_Bitmap* source, const FT_Vector source_offset, FT_Bitmap* target, FT_Vector * atarget_offset, FT_Color color);
	FT_Error APICALL (*FT_GlyphSlot_Own_Bitmap)(struct FreetypeIFace *Self, FT_GlyphSlot slot);
	FT_Error APICALL (*FT_Bitmap_Done)(struct FreetypeIFace *Self, FT_Library library, FT_Bitmap * bitmap);
	FT_Error APICALL (*FT_Stream_OpenBzip2)(struct FreetypeIFace *Self, FT_Stream stream, FT_Stream source);
	FT_Error APICALL (*FTC_Manager_New)(struct FreetypeIFace *Self, FT_Library library, FT_UInt max_faces, FT_UInt max_sizes, FT_ULong max_bytes, FTC_Face_Requester requester, FT_Pointer req_data, FTC_Manager * amanager);
	void APICALL (*FTC_Manager_Reset)(struct FreetypeIFace *Self, FTC_Manager manager);
	void APICALL (*FTC_Manager_Done)(struct FreetypeIFace *Self, FTC_Manager manager);
	FT_Error APICALL (*FTC_Manager_LookupFace)(struct FreetypeIFace *Self, FTC_Manager manager, FTC_FaceID face_id, FT_Face * aface);
	FT_Error APICALL (*FTC_Manager_LookupSize)(struct FreetypeIFace *Self, FTC_Manager manager, FTC_Scaler scaler, FT_Size * asize);
	void APICALL (*FTC_Node_Unref)(struct FreetypeIFace *Self, FTC_Node node, FTC_Manager manager);
	void APICALL (*FTC_Manager_RemoveFaceID)(struct FreetypeIFace *Self, FTC_Manager manager, FTC_FaceID face_id);
	FT_Error APICALL (*FTC_CMapCache_New)(struct FreetypeIFace *Self, FTC_Manager manager, FTC_CMapCache * acache);
	FT_UInt APICALL (*FTC_CMapCache_Lookup)(struct FreetypeIFace *Self, FTC_CMapCache cache, FTC_FaceID face_id, FT_Int cmap_index, FT_UInt32 char_code);
	FT_Error APICALL (*FTC_ImageCache_New)(struct FreetypeIFace *Self, FTC_Manager manager, FTC_ImageCache * acache);
	FT_Error APICALL (*FTC_ImageCache_Lookup)(struct FreetypeIFace *Self, FTC_ImageCache cache, FTC_ImageType type, FT_UInt gindex, FT_Glyph * aglyph, FTC_Node * anode);
	FT_Error APICALL (*FTC_ImageCache_LookupScaler)(struct FreetypeIFace *Self, FTC_ImageCache cache, FTC_Scaler scaler, FT_ULong load_flags, FT_UInt gindex, FT_Glyph * aglyph, FTC_Node * anode);
	FT_Error APICALL (*FTC_SBitCache_New)(struct FreetypeIFace *Self, FTC_Manager manager, FTC_SBitCache * acache);
	FT_Error APICALL (*FTC_SBitCache_Lookup)(struct FreetypeIFace *Self, FTC_SBitCache cache, FTC_ImageType type, FT_UInt gindex, FTC_SBit * sbit, FTC_Node * anode);
	FT_Error APICALL (*FTC_SBitCache_LookupScaler)(struct FreetypeIFace *Self, FTC_SBitCache cache, FTC_Scaler scaler, FT_ULong load_flags, FT_UInt gindex, FTC_SBit * sbit, FTC_Node * anode);
	FT_Error APICALL (*FT_Get_CID_Registry_Ordering_Supplement)(struct FreetypeIFace *Self, FT_Face face, const char* * registry, const char* * ordering, FT_Int * supplement);
	FT_Error APICALL (*FT_Get_CID_Is_Internally_CID_Keyed)(struct FreetypeIFace *Self, FT_Face face, FT_Bool * is_cid);
	FT_Error APICALL (*FT_Get_CID_From_Glyph_Index)(struct FreetypeIFace *Self, FT_Face face, FT_UInt glyph_index, FT_UInt * cid);
	FT_Error APICALL (*FT_Palette_Data_Get)(struct FreetypeIFace *Self, FT_Face face, FT_Palette_Data * apalette);
	FT_Error APICALL (*FT_Palette_Select)(struct FreetypeIFace *Self, FT_Face face, FT_UShort palette_index, FT_Color* * apalette);
	FT_Error APICALL (*FT_Palette_Set_Foreground_Color)(struct FreetypeIFace *Self, FT_Face face, FT_Color foreground_color);
	FT_Bool APICALL (*FT_Get_Color_Glyph_Layer)(struct FreetypeIFace *Self, FT_Face face, FT_UInt base_glyph, FT_UInt * aglyph_index, FT_UInt * acolor_index, FT_LayerIterator* iterator);
	FT_Bool APICALL (*FT_Get_Color_Glyph_Paint)(struct FreetypeIFace *Self, FT_Face face, FT_UInt base_glyph, FT_Color_Root_Transform root_transform, FT_OpaquePaint* paint);
	FT_Bool APICALL (*FT_Get_Color_Glyph_ClipBox)(struct FreetypeIFace *Self, FT_Face face, FT_UInt base_glyph, FT_ClipBox* clip_box);
	FT_Bool APICALL (*FT_Get_Paint_Layers)(struct FreetypeIFace *Self, FT_Face face, FT_LayerIterator* iterator, FT_OpaquePaint* paint);
	FT_Bool APICALL (*FT_Get_Colorline_Stops)(struct FreetypeIFace *Self, FT_Face face, FT_ColorStop* color_stop, FT_ColorStopIterator* iterator);
	FT_Bool APICALL (*FT_Get_Paint)(struct FreetypeIFace *Self, FT_Face face, FT_OpaquePaint opaque_paint, FT_COLR_Paint* paint);
	const char* APICALL (*FT_Error_String)(struct FreetypeIFace *Self, FT_Error error_code);
	const char* APICALL (*FT_Get_Font_Format)(struct FreetypeIFace *Self, FT_Face face);
	const char* APICALL (*FT_Get_X11_Font_Format)(struct FreetypeIFace *Self, FT_Face face);
	FT_Int APICALL (*FT_Get_Gasp)(struct FreetypeIFace *Self, FT_Face face, FT_UInt ppem);
	FT_Error APICALL (*FT_New_Glyph)(struct FreetypeIFace *Self, FT_Library library, FT_Glyph_Format format, FT_Glyph * aglyph);
	FT_Error APICALL (*FT_Get_Glyph)(struct FreetypeIFace *Self, FT_GlyphSlot slot, FT_Glyph * aglyph);
	FT_Error APICALL (*FT_Glyph_Copy)(struct FreetypeIFace *Self, FT_Glyph source, FT_Glyph * target);
	FT_Error APICALL (*FT_Glyph_Transform)(struct FreetypeIFace *Self, FT_Glyph glyph, const FT_Matrix* matrix, const FT_Vector* delta);
	void APICALL (*FT_Glyph_Get_CBox)(struct FreetypeIFace *Self, FT_Glyph glyph, FT_UInt bbox_mode, FT_BBox * acbox);
	FT_Error APICALL (*FT_Glyph_To_Bitmap)(struct FreetypeIFace *Self, FT_Glyph* the_glyph, FT_Render_Mode render_mode, const FT_Vector* origin, FT_Bool destroy);
	void APICALL (*FT_Done_Glyph)(struct FreetypeIFace *Self, FT_Glyph glyph);
	void APICALL (*FT_Matrix_Multiply)(struct FreetypeIFace *Self, const FT_Matrix* a, FT_Matrix* b);
	FT_Error APICALL (*FT_Matrix_Invert)(struct FreetypeIFace *Self, FT_Matrix* matrix);
	FT_Error APICALL (*FT_TrueTypeGX_Validate)(struct FreetypeIFace *Self, FT_Face face, FT_UInt validation_flags, FT_Bytes tables[FT_VALIDATE_GX_LENGTH], FT_UInt table_length);
	void APICALL (*FT_TrueTypeGX_Free)(struct FreetypeIFace *Self, FT_Face face, FT_Bytes table);
	FT_Error APICALL (*FT_ClassicKern_Validate)(struct FreetypeIFace *Self, FT_Face face, FT_UInt validation_flags, FT_Bytes * ckern_table);
	void APICALL (*FT_ClassicKern_Free)(struct FreetypeIFace *Self, FT_Face face, FT_Bytes table);
	FT_Error APICALL (*FT_Stream_OpenGzip)(struct FreetypeIFace *Self, FT_Stream stream, FT_Stream source);
	FT_Error APICALL (*FT_Gzip_Uncompress)(struct FreetypeIFace *Self, FT_Memory memory, FT_Byte* output, FT_ULong* output_len, const FT_Byte* input, FT_ULong input_len);
	FT_Error APICALL (*FT_Library_SetLcdFilter)(struct FreetypeIFace *Self, FT_Library library, FT_LcdFilter filter);
	FT_Error APICALL (*FT_Library_SetLcdFilterWeights)(struct FreetypeIFace *Self, FT_Library library, unsigned char * weights);
	FT_Error APICALL (*FT_Library_SetLcdGeometry)(struct FreetypeIFace *Self, FT_Library library, FT_Vector sub[3]);
	FT_ListNode APICALL (*FT_List_Find)(struct FreetypeIFace *Self, FT_List list, void* data);
	void APICALL (*FT_List_Add)(struct FreetypeIFace *Self, FT_List list, FT_ListNode node);
	void APICALL (*FT_List_Insert)(struct FreetypeIFace *Self, FT_List list, FT_ListNode node);
	void APICALL (*FT_List_Remove)(struct FreetypeIFace *Self, FT_List list, FT_ListNode node);
	void APICALL (*FT_List_Up)(struct FreetypeIFace *Self, FT_List list, FT_ListNode node);
	FT_Error APICALL (*FT_List_Iterate)(struct FreetypeIFace *Self, FT_List list, FT_List_Iterator iterator, void* user);
	void APICALL (*FT_List_Finalize)(struct FreetypeIFace *Self, FT_List list, FT_List_Destructor destroy, FT_Memory memory, void* user);
	void APICALL (*FT_Trace_Set_Level)(struct FreetypeIFace *Self, const char* tracing_level);
	void APICALL (*FT_Trace_Set_Default_Level)(struct FreetypeIFace *Self);
	void APICALL (*FT_Set_Log_Handler)(struct FreetypeIFace *Self, FT_Custom_Log_Handler handler);
	void APICALL (*FT_Set_Default_Log_Handler)(struct FreetypeIFace *Self);
	FT_Error APICALL (*FT_Stream_OpenLZW)(struct FreetypeIFace *Self, FT_Stream stream, FT_Stream source);
	FT_Error APICALL (*FT_Get_Multi_Master)(struct FreetypeIFace *Self, FT_Face face, FT_Multi_Master * amaster);
	FT_Error APICALL (*FT_Get_MM_Var)(struct FreetypeIFace *Self, FT_Face face, FT_MM_Var* * amaster);
	FT_Error APICALL (*FT_Done_MM_Var)(struct FreetypeIFace *Self, FT_Library library, FT_MM_Var * amaster);
	FT_Error APICALL (*FT_Set_MM_Design_Coordinates)(struct FreetypeIFace *Self, FT_Face face, FT_UInt num_coords, FT_Long* coords);
	FT_Error APICALL (*FT_Set_Var_Design_Coordinates)(struct FreetypeIFace *Self, FT_Face face, FT_UInt num_coords, FT_Fixed* coords);
	FT_Error APICALL (*FT_Get_Var_Design_Coordinates)(struct FreetypeIFace *Self, FT_Face face, FT_UInt num_coords, FT_Fixed* coords);
	FT_Error APICALL (*FT_Set_MM_Blend_Coordinates)(struct FreetypeIFace *Self, FT_Face face, FT_UInt num_coords, FT_Fixed* coords);
	FT_Error APICALL (*FT_Get_MM_Blend_Coordinates)(struct FreetypeIFace *Self, FT_Face face, FT_UInt num_coords, FT_Fixed* coords);
	FT_Error APICALL (*FT_Set_Var_Blend_Coordinates)(struct FreetypeIFace *Self, FT_Face face, FT_UInt num_coords, FT_Fixed* coords);
	FT_Error APICALL (*FT_Get_Var_Blend_Coordinates)(struct FreetypeIFace *Self, FT_Face face, FT_UInt num_coords, FT_Fixed* coords);
	FT_Error APICALL (*FT_Set_MM_WeightVector)(struct FreetypeIFace *Self, FT_Face face, FT_UInt len, FT_Fixed* weightvector);
	FT_Error APICALL (*FT_Get_MM_WeightVector)(struct FreetypeIFace *Self, FT_Face face, FT_UInt* len, FT_Fixed* weightvector);
	FT_Error APICALL (*FT_Get_Var_Axis_Flags)(struct FreetypeIFace *Self, FT_MM_Var* master, FT_UInt axis_index, FT_UInt* flags);
	FT_Error APICALL (*FT_Set_Named_Instance)(struct FreetypeIFace *Self, FT_Face face, FT_UInt instance_index);
	FT_Error APICALL (*FT_Get_Default_Named_Instance)(struct FreetypeIFace *Self, FT_Face face, FT_UInt * instance_index);
	FT_Error APICALL (*FT_Add_Module)(struct FreetypeIFace *Self, FT_Library library, const FT_Module_Class* clazz);
	FT_Module APICALL (*FT_Get_Module)(struct FreetypeIFace *Self, FT_Library library, const char* module_name);
	FT_Error APICALL (*FT_Remove_Module)(struct FreetypeIFace *Self, FT_Library library, FT_Module module);
	FT_Error APICALL (*FT_Property_Set)(struct FreetypeIFace *Self, FT_Library library, const FT_String* module_name, const FT_String* property_name, const void* value);
	FT_Error APICALL (*FT_Property_Get)(struct FreetypeIFace *Self, FT_Library library, const FT_String* module_name, const FT_String* property_name, void* value);
	void APICALL (*FT_Set_Default_Properties)(struct FreetypeIFace *Self, FT_Library library);
	FT_Error APICALL (*FT_Reference_Library)(struct FreetypeIFace *Self, FT_Library library);
	FT_Error APICALL (*FT_New_Library)(struct FreetypeIFace *Self, FT_Memory memory, FT_Library * alibrary);
	FT_Error APICALL (*FT_Done_Library)(struct FreetypeIFace *Self, FT_Library library);
	void APICALL (*FT_Set_Debug_Hook)(struct FreetypeIFace *Self, FT_Library library, FT_UInt hook_index, FT_DebugHook_Func debug_hook);
	void APICALL (*FT_Add_Default_Modules)(struct FreetypeIFace *Self, FT_Library library);
	FT_TrueTypeEngineType APICALL (*FT_Get_TrueType_Engine_Type)(struct FreetypeIFace *Self, FT_Library library);
	FT_Error APICALL (*FT_OpenType_Validate)(struct FreetypeIFace *Self, FT_Face face, FT_UInt validation_flags, FT_Bytes * BASE_table, FT_Bytes * GDEF_table, FT_Bytes * GPOS_table, FT_Bytes * GSUB_table, FT_Bytes * JSTF_table);
	void APICALL (*FT_OpenType_Free)(struct FreetypeIFace *Self, FT_Face face, FT_Bytes table);
	FT_Error APICALL (*FT_Outline_Decompose)(struct FreetypeIFace *Self, FT_Outline* outline, const FT_Outline_Funcs* func_interface, void* user);
	FT_Error APICALL (*FT_Outline_New)(struct FreetypeIFace *Self, FT_Library library, FT_UInt numPoints, FT_Int numContours, FT_Outline * anoutline);
	FT_Error APICALL (*FT_Outline_Done)(struct FreetypeIFace *Self, FT_Library library, FT_Outline* outline);
	FT_Error APICALL (*FT_Outline_Check)(struct FreetypeIFace *Self, FT_Outline* outline);
	void APICALL (*FT_Outline_Get_CBox)(struct FreetypeIFace *Self, const FT_Outline* outline, FT_BBox * acbox);
	void APICALL (*FT_Outline_Translate)(struct FreetypeIFace *Self, const FT_Outline* outline, FT_Pos xOffset, FT_Pos yOffset);
	FT_Error APICALL (*FT_Outline_Copy)(struct FreetypeIFace *Self, const FT_Outline* source, FT_Outline * target);
	void APICALL (*FT_Outline_Transform)(struct FreetypeIFace *Self, const FT_Outline* outline, const FT_Matrix* matrix);
	FT_Error APICALL (*FT_Outline_Embolden)(struct FreetypeIFace *Self, FT_Outline* outline, FT_Pos strength);
	FT_Error APICALL (*FT_Outline_EmboldenXY)(struct FreetypeIFace *Self, FT_Outline* outline, FT_Pos xstrength, FT_Pos ystrength);
	void APICALL (*FT_Outline_Reverse)(struct FreetypeIFace *Self, FT_Outline* outline);
	FT_Error APICALL (*FT_Outline_Get_Bitmap)(struct FreetypeIFace *Self, FT_Library library, FT_Outline* outline, const FT_Bitmap * abitmap);
	FT_Error APICALL (*FT_Outline_Render)(struct FreetypeIFace *Self, FT_Library library, FT_Outline* outline, FT_Raster_Params* params);
	FT_Orientation APICALL (*FT_Outline_Get_Orientation)(struct FreetypeIFace *Self, FT_Outline* outline);
	FT_Error APICALL (*FT_Get_PFR_Metrics)(struct FreetypeIFace *Self, FT_Face face, FT_UInt * aoutline_resolution, FT_UInt * ametrics_resolution, FT_Fixed * ametrics_x_scale, FT_Fixed * ametrics_y_scale);
	FT_Error APICALL (*FT_Get_PFR_Kerning)(struct FreetypeIFace *Self, FT_Face face, FT_UInt left, FT_UInt right, FT_Vector * avector);
	FT_Error APICALL (*FT_Get_PFR_Advance)(struct FreetypeIFace *Self, FT_Face face, FT_UInt gindex, FT_Pos * aadvance);
	FT_Renderer APICALL (*FT_Get_Renderer)(struct FreetypeIFace *Self, FT_Library library, FT_Glyph_Format format);
	FT_Error APICALL (*FT_Set_Renderer)(struct FreetypeIFace *Self, FT_Library library, FT_Renderer renderer, FT_UInt num_params, FT_Parameter* parameters);
	FT_Error APICALL (*FT_New_Size)(struct FreetypeIFace *Self, FT_Face face, FT_Size* size);
	FT_Error APICALL (*FT_Done_Size)(struct FreetypeIFace *Self, FT_Size size);
	FT_Error APICALL (*FT_Activate_Size)(struct FreetypeIFace *Self, FT_Size size);
	FT_UInt APICALL (*FT_Get_Sfnt_Name_Count)(struct FreetypeIFace *Self, FT_Face face);
	FT_Error APICALL (*FT_Get_Sfnt_Name)(struct FreetypeIFace *Self, FT_Face face, FT_UInt idx, FT_SfntName * aname);
	FT_Error APICALL (*FT_Get_Sfnt_LangTag)(struct FreetypeIFace *Self, FT_Face face, FT_UInt langID, FT_SfntLangTag * alangTag);
	FT_StrokerBorder APICALL (*FT_Outline_GetInsideBorder)(struct FreetypeIFace *Self, FT_Outline* outline);
	FT_StrokerBorder APICALL (*FT_Outline_GetOutsideBorder)(struct FreetypeIFace *Self, FT_Outline* outline);
	FT_Error APICALL (*FT_Stroker_New)(struct FreetypeIFace *Self, FT_Library library, FT_Stroker * astroker);
	void APICALL (*FT_Stroker_Set)(struct FreetypeIFace *Self, FT_Stroker stroker, FT_Fixed radius, FT_Stroker_LineCap line_cap, FT_Stroker_LineJoin line_join, FT_Fixed miter_limit);
	void APICALL (*FT_Stroker_Rewind)(struct FreetypeIFace *Self, FT_Stroker stroker);
	FT_Error APICALL (*FT_Stroker_ParseOutline)(struct FreetypeIFace *Self, FT_Stroker stroker, FT_Outline* outline, FT_Bool opened);
	FT_Error APICALL (*FT_Stroker_BeginSubPath)(struct FreetypeIFace *Self, FT_Stroker stroker, FT_Vector* to, FT_Bool open);
	FT_Error APICALL (*FT_Stroker_EndSubPath)(struct FreetypeIFace *Self, FT_Stroker stroker);
	FT_Error APICALL (*FT_Stroker_LineTo)(struct FreetypeIFace *Self, FT_Stroker stroker, FT_Vector* to);
	FT_Error APICALL (*FT_Stroker_ConicTo)(struct FreetypeIFace *Self, FT_Stroker stroker, FT_Vector* control, FT_Vector* to);
	FT_Error APICALL (*FT_Stroker_CubicTo)(struct FreetypeIFace *Self, FT_Stroker stroker, FT_Vector* control1, FT_Vector* control2, FT_Vector* to);
	FT_Error APICALL (*FT_Stroker_GetBorderCounts)(struct FreetypeIFace *Self, FT_Stroker stroker, FT_StrokerBorder border, FT_UInt * anum_points, FT_UInt * anum_contours);
	void APICALL (*FT_Stroker_ExportBorder)(struct FreetypeIFace *Self, FT_Stroker stroker, FT_StrokerBorder border, FT_Outline* outline);
	FT_Error APICALL (*FT_Stroker_GetCounts)(struct FreetypeIFace *Self, FT_Stroker stroker, FT_UInt * anum_points, FT_UInt * anum_contours);
	void APICALL (*FT_Stroker_Export)(struct FreetypeIFace *Self, FT_Stroker stroker, FT_Outline* outline);
	void APICALL (*FT_Stroker_Done)(struct FreetypeIFace *Self, FT_Stroker stroker);
	FT_Error APICALL (*FT_Glyph_Stroke)(struct FreetypeIFace *Self, FT_Glyph * pglyph, FT_Stroker stroker, FT_Bool destroy);
	FT_Error APICALL (*FT_Glyph_StrokeBorder)(struct FreetypeIFace *Self, FT_Glyph * pglyph, FT_Stroker stroker, FT_Bool inside, FT_Bool destroy);
	void APICALL (*FT_GlyphSlot_Embolden)(struct FreetypeIFace *Self, FT_GlyphSlot slot);
	void APICALL (*FT_GlyphSlot_AdjustWeight)(struct FreetypeIFace *Self, FT_GlyphSlot slot, FT_Fixed xdelta, FT_Fixed ydelta);
	void APICALL (*FT_GlyphSlot_Oblique)(struct FreetypeIFace *Self, FT_GlyphSlot slot);
	void APICALL (*FT_GlyphSlot_Slant)(struct FreetypeIFace *Self, FT_GlyphSlot slot, FT_Fixed xslant, FT_Fixed yslant);
	FT_Fixed APICALL (*FT_Sin)(struct FreetypeIFace *Self, FT_Angle angle);
	FT_Fixed APICALL (*FT_Cos)(struct FreetypeIFace *Self, FT_Angle angle);
	FT_Fixed APICALL (*FT_Tan)(struct FreetypeIFace *Self, FT_Angle angle);
	FT_Angle APICALL (*FT_Atan2)(struct FreetypeIFace *Self, FT_Fixed x, FT_Fixed y);
	FT_Angle APICALL (*FT_Angle_Diff)(struct FreetypeIFace *Self, FT_Angle angle1, FT_Angle angle2);
	void APICALL (*FT_Vector_Unit)(struct FreetypeIFace *Self, FT_Vector* vec, FT_Angle angle);
	void APICALL (*FT_Vector_Rotate)(struct FreetypeIFace *Self, FT_Vector* vec, FT_Angle angle);
	FT_Fixed APICALL (*FT_Vector_Length)(struct FreetypeIFace *Self, FT_Vector* vec);
	void APICALL (*FT_Vector_Polarize)(struct FreetypeIFace *Self, FT_Vector* vec, FT_Fixed * length, FT_Angle * angle);
	void APICALL (*FT_Vector_From_Polar)(struct FreetypeIFace *Self, FT_Vector* vec, FT_Fixed length, FT_Angle angle);
	FT_Error APICALL (*FT_Get_WinFNT_Header)(struct FreetypeIFace *Self, FT_Face face, FT_WinFNT_HeaderRec * aheader);
	FT_Int APICALL (*FT_Has_PS_Glyph_Names)(struct FreetypeIFace *Self, FT_Face face);
	FT_Error APICALL (*FT_Get_PS_Font_Info)(struct FreetypeIFace *Self, FT_Face face, PS_FontInfo afont_info);
	FT_Error APICALL (*FT_Get_PS_Font_Private)(struct FreetypeIFace *Self, FT_Face face, PS_Private afont_private);
	FT_Long APICALL (*FT_Get_PS_Font_Value)(struct FreetypeIFace *Self, FT_Face face, PS_Dict_Keys key, FT_UInt idx, void * value, FT_Long value_len);
	void* APICALL (*FT_Get_Sfnt_Table)(struct FreetypeIFace *Self, FT_Face face, FT_Sfnt_Tag tag);
	FT_Error APICALL (*FT_Load_Sfnt_Table)(struct FreetypeIFace *Self, FT_Face face, FT_ULong tag, FT_Long offset, FT_Byte* buffer, FT_ULong* length);
	FT_Error APICALL (*FT_Sfnt_Table_Info)(struct FreetypeIFace *Self, FT_Face face, FT_UInt table_index, FT_ULong * tag, FT_ULong * length);
	FT_ULong APICALL (*FT_Get_CMap_Language_ID)(struct FreetypeIFace *Self, FT_CharMap charmap);
	FT_Long APICALL (*FT_Get_CMap_Format)(struct FreetypeIFace *Self, FT_CharMap charmap);
};

#ifdef __cplusplus
}
#ifdef __USE_AMIGAOS_NAMESPACE__
}
#endif
#endif

#endif /* FREETYPE_INTERFACE_DEF_H */
