/*
** This file was machine generated by idltool.py 54.8.
** Do not edit.
*/

#include <exec/types.h>
#include <exec/exec.h>
#include <exec/interfaces.h>
#include <freetype/freetype.h>
#include <freetype/freetype.h>
#include <freetype/ftbdf.h>
#include <freetype/ftcache.h>
#include <freetype/ftcolor.h>
#include <freetype/ftgxval.h>
#include <freetype/ftlcdfil.h>
#include <freetype/ftlist.h>
#include <freetype/ftlogging.h>
#include <freetype/ftmm.h>
#include <freetype/ftmodapi.h>
#include <freetype/ftoutln.h>
#include <freetype/ftsnames.h>
#include <freetype/ftstroke.h>
#include <freetype/fttrigon.h>
#include <freetype/ftwinfnt.h>
#include <freetype/t1tables.h>
#include <freetype/tttables.h>


/* forward declaration */
struct FreetypeIFace;

extern uint32 VARARGS68K _impl_Obtain(struct FreetypeIFace *);
extern uint32 VARARGS68K _impl_Release(struct FreetypeIFace *);
extern FT_Error VARARGS68K _impl_FT_Init_FreeType(struct FreetypeIFace *, FT_Library * alibrary);
extern FT_Error VARARGS68K _impl_FT_Done_FreeType(struct FreetypeIFace *, FT_Library library);
extern FT_Error VARARGS68K _impl_FT_New_Face(struct FreetypeIFace *, FT_Library library, const char* filepathname, FT_Long face_index, FT_Face * aface);
extern FT_Error VARARGS68K _impl_FT_New_Memory_Face(struct FreetypeIFace *, FT_Library library, const FT_Byte* file_base, FT_Long file_size, FT_Long face_index, FT_Face * aface);
extern FT_Error VARARGS68K _impl_FT_Open_Face(struct FreetypeIFace *, FT_Library library, const FT_Open_Args* args, FT_Long face_index, FT_Face * aface);
extern FT_Error VARARGS68K _impl_FT_Attach_File(struct FreetypeIFace *, FT_Face face, const char* filepathname);
extern FT_Error VARARGS68K _impl_FT_Attach_Stream(struct FreetypeIFace *, FT_Face face, const FT_Open_Args* parameters);
extern FT_Error VARARGS68K _impl_FT_Reference_Face(struct FreetypeIFace *, FT_Face face);
extern FT_Error VARARGS68K _impl_FT_Done_Face(struct FreetypeIFace *, FT_Face face);
extern FT_Error VARARGS68K _impl_FT_Select_Size(struct FreetypeIFace *, FT_Face face, FT_Int strike_index);
extern FT_Error VARARGS68K _impl_FT_Request_Size(struct FreetypeIFace *, FT_Face face, FT_Size_Request req);
extern FT_Error VARARGS68K _impl_FT_Set_Char_Size(struct FreetypeIFace *, FT_Face face, FT_F26Dot6 char_width, FT_F26Dot6 char_height, FT_UInt horz_resolution, FT_UInt vert_resolution);
extern FT_Error VARARGS68K _impl_FT_Set_Pixel_Sizes(struct FreetypeIFace *, FT_Face face, FT_UInt pixel_width, FT_UInt pixel_height);
extern FT_Error VARARGS68K _impl_FT_Load_Glyph(struct FreetypeIFace *, FT_Face face, FT_UInt glyph_index, FT_Int32 load_flags);
extern FT_Error VARARGS68K _impl_FT_Load_Char(struct FreetypeIFace *, FT_Face face, FT_ULong char_code, FT_Int32 load_flags);
extern void VARARGS68K _impl_FT_Set_Transform(struct FreetypeIFace *, FT_Face face, FT_Matrix* matrix, FT_Vector* delta);
extern void VARARGS68K _impl_FT_Get_Transform(struct FreetypeIFace *, FT_Face face, FT_Matrix* matrix, FT_Vector* delta);
extern FT_Error VARARGS68K _impl_FT_Render_Glyph(struct FreetypeIFace *, FT_GlyphSlot slot, FT_Render_Mode render_mode);
extern FT_Error VARARGS68K _impl_FT_Get_Kerning(struct FreetypeIFace *, FT_Face face, FT_UInt left_glyph, FT_UInt right_glyph, FT_UInt kern_mode, FT_Vector * akerning);
extern FT_Error VARARGS68K _impl_FT_Get_Track_Kerning(struct FreetypeIFace *, FT_Face face, FT_Fixed point_size, FT_Int degree, FT_Fixed* akerning);
extern FT_Error VARARGS68K _impl_FT_Select_Charmap(struct FreetypeIFace *, FT_Face face, FT_Encoding encoding);
extern FT_Error VARARGS68K _impl_FT_Set_Charmap(struct FreetypeIFace *, FT_Face face, FT_CharMap charmap);
extern FT_Int VARARGS68K _impl_FT_Get_Charmap_Index(struct FreetypeIFace *, FT_CharMap charmap);
extern FT_UInt VARARGS68K _impl_FT_Get_Char_Index(struct FreetypeIFace *, FT_Face face, FT_ULong charcode);
extern FT_ULong VARARGS68K _impl_FT_Get_First_Char(struct FreetypeIFace *, FT_Face face, FT_UInt * agindex);
extern FT_ULong VARARGS68K _impl_FT_Get_Next_Char(struct FreetypeIFace *, FT_Face face, FT_ULong char_code, FT_UInt * agindex);
extern FT_Error VARARGS68K _impl_FT_Face_Properties(struct FreetypeIFace *, FT_Face face, FT_UInt num_properties, FT_Parameter* properties);
extern FT_UInt VARARGS68K _impl_FT_Get_Name_Index(struct FreetypeIFace *, FT_Face face, const FT_String* glyph_name);
extern FT_Error VARARGS68K _impl_FT_Get_Glyph_Name(struct FreetypeIFace *, FT_Face face, FT_UInt glyph_index, FT_Pointer buffer, FT_UInt buffer_max);
extern const char* VARARGS68K _impl_FT_Get_Postscript_Name(struct FreetypeIFace *, FT_Face face);
extern FT_Error VARARGS68K _impl_FT_Get_SubGlyph_Info(struct FreetypeIFace *, FT_GlyphSlot glyph, FT_UInt sub_index, FT_Int * p_index, FT_UInt * p_flags, FT_Int * p_arg1, FT_Int * p_arg2, FT_Matrix * p_transform);
extern FT_UShort VARARGS68K _impl_FT_Get_FSType_Flags(struct FreetypeIFace *, FT_Face face);
extern FT_UInt VARARGS68K _impl_FT_Face_GetCharVariantIndex(struct FreetypeIFace *, FT_Face face, FT_ULong charcode, FT_ULong variantSelector);
extern FT_Int VARARGS68K _impl_FT_Face_GetCharVariantIsDefault(struct FreetypeIFace *, FT_Face face, FT_ULong charcode, FT_ULong variantSelector);
extern FT_UInt32* VARARGS68K _impl_FT_Face_GetVariantSelectors(struct FreetypeIFace *, FT_Face face);
extern FT_UInt32* VARARGS68K _impl_FT_Face_GetVariantsOfChar(struct FreetypeIFace *, FT_Face face, FT_ULong charcode);
extern FT_UInt32* VARARGS68K _impl_FT_Face_GetCharsOfVariant(struct FreetypeIFace *, FT_Face face, FT_ULong variantSelector);
extern FT_Long VARARGS68K _impl_FT_MulDiv(struct FreetypeIFace *, FT_Long a, FT_Long b, FT_Long c);
extern FT_Long VARARGS68K _impl_FT_MulFix(struct FreetypeIFace *, FT_Long a, FT_Long b);
extern FT_Long VARARGS68K _impl_FT_DivFix(struct FreetypeIFace *, FT_Long a, FT_Long b);
extern FT_Fixed VARARGS68K _impl_FT_RoundFix(struct FreetypeIFace *, FT_Fixed a);
extern FT_Fixed VARARGS68K _impl_FT_CeilFix(struct FreetypeIFace *, FT_Fixed a);
extern FT_Fixed VARARGS68K _impl_FT_FloorFix(struct FreetypeIFace *, FT_Fixed a);
extern void VARARGS68K _impl_FT_Vector_Transform(struct FreetypeIFace *, FT_Vector* vector, const FT_Matrix* matrix);
extern void VARARGS68K _impl_FT_Library_Version(struct FreetypeIFace *, FT_Library library, FT_Int * amajor, FT_Int * aminor, FT_Int * apatch);
extern FT_Bool VARARGS68K _impl_FT_Face_CheckTrueTypePatents(struct FreetypeIFace *, FT_Face face);
extern FT_Bool VARARGS68K _impl_FT_Face_SetUnpatentedHinting(struct FreetypeIFace *, FT_Face face, FT_Bool value);
extern FT_Error VARARGS68K _impl_FT_Get_Advance(struct FreetypeIFace *, FT_Face face, FT_UInt gindex, FT_Int32 load_flags, FT_Fixed * padvance);
extern FT_Error VARARGS68K _impl_FT_Get_Advances(struct FreetypeIFace *, FT_Face face, FT_UInt start, FT_UInt count, FT_Int32 load_flags, FT_Fixed * padvances);
extern FT_Error VARARGS68K _impl_FT_Outline_Get_BBox(struct FreetypeIFace *, FT_Outline* outline, FT_BBox * abbox);
extern FT_Error VARARGS68K _impl_FT_Get_BDF_Charset_ID(struct FreetypeIFace *, FT_Face face, const char* * acharset_encoding, const char* * acharset_registry);
extern FT_Error VARARGS68K _impl_FT_Get_BDF_Property(struct FreetypeIFace *, FT_Face face, const char* prop_name, BDF_PropertyRec * aproperty);
extern void VARARGS68K _impl_FT_Bitmap_Init(struct FreetypeIFace *, FT_Bitmap * abitmap);
extern void VARARGS68K _impl_FT_Bitmap_New(struct FreetypeIFace *, FT_Bitmap * abitmap);
extern FT_Error VARARGS68K _impl_FT_Bitmap_Copy(struct FreetypeIFace *, FT_Library library, const FT_Bitmap * source, FT_Bitmap * target);
extern FT_Error VARARGS68K _impl_FT_Bitmap_Embolden(struct FreetypeIFace *, FT_Library library, FT_Bitmap* bitmap, FT_Pos xStrength, FT_Pos yStrength);
extern FT_Error VARARGS68K _impl_FT_Bitmap_Convert(struct FreetypeIFace *, FT_Library library, const FT_Bitmap * source, FT_Bitmap * target, FT_Int alignment);
extern FT_Error VARARGS68K _impl_FT_Bitmap_Blend(struct FreetypeIFace *, FT_Library library, const FT_Bitmap* source, const FT_Vector source_offset, FT_Bitmap* target, FT_Vector * atarget_offset, FT_Color color);
extern FT_Error VARARGS68K _impl_FT_GlyphSlot_Own_Bitmap(struct FreetypeIFace *, FT_GlyphSlot slot);
extern FT_Error VARARGS68K _impl_FT_Bitmap_Done(struct FreetypeIFace *, FT_Library library, FT_Bitmap * bitmap);
extern FT_Error VARARGS68K _impl_FT_Stream_OpenBzip2(struct FreetypeIFace *, FT_Stream stream, FT_Stream source);
extern FT_Error VARARGS68K _impl_FTC_Manager_New(struct FreetypeIFace *, FT_Library library, FT_UInt max_faces, FT_UInt max_sizes, FT_ULong max_bytes, FTC_Face_Requester requester, FT_Pointer req_data, FTC_Manager * amanager);
extern void VARARGS68K _impl_FTC_Manager_Reset(struct FreetypeIFace *, FTC_Manager manager);
extern void VARARGS68K _impl_FTC_Manager_Done(struct FreetypeIFace *, FTC_Manager manager);
extern FT_Error VARARGS68K _impl_FTC_Manager_LookupFace(struct FreetypeIFace *, FTC_Manager manager, FTC_FaceID face_id, FT_Face * aface);
extern FT_Error VARARGS68K _impl_FTC_Manager_LookupSize(struct FreetypeIFace *, FTC_Manager manager, FTC_Scaler scaler, FT_Size * asize);
extern void VARARGS68K _impl_FTC_Node_Unref(struct FreetypeIFace *, FTC_Node node, FTC_Manager manager);
extern void VARARGS68K _impl_FTC_Manager_RemoveFaceID(struct FreetypeIFace *, FTC_Manager manager, FTC_FaceID face_id);
extern FT_Error VARARGS68K _impl_FTC_CMapCache_New(struct FreetypeIFace *, FTC_Manager manager, FTC_CMapCache * acache);
extern FT_UInt VARARGS68K _impl_FTC_CMapCache_Lookup(struct FreetypeIFace *, FTC_CMapCache cache, FTC_FaceID face_id, FT_Int cmap_index, FT_UInt32 char_code);
extern FT_Error VARARGS68K _impl_FTC_ImageCache_New(struct FreetypeIFace *, FTC_Manager manager, FTC_ImageCache * acache);
extern FT_Error VARARGS68K _impl_FTC_ImageCache_Lookup(struct FreetypeIFace *, FTC_ImageCache cache, FTC_ImageType type, FT_UInt gindex, FT_Glyph * aglyph, FTC_Node * anode);
extern FT_Error VARARGS68K _impl_FTC_ImageCache_LookupScaler(struct FreetypeIFace *, FTC_ImageCache cache, FTC_Scaler scaler, FT_ULong load_flags, FT_UInt gindex, FT_Glyph * aglyph, FTC_Node * anode);
extern FT_Error VARARGS68K _impl_FTC_SBitCache_New(struct FreetypeIFace *, FTC_Manager manager, FTC_SBitCache * acache);
extern FT_Error VARARGS68K _impl_FTC_SBitCache_Lookup(struct FreetypeIFace *, FTC_SBitCache cache, FTC_ImageType type, FT_UInt gindex, FTC_SBit * sbit, FTC_Node * anode);
extern FT_Error VARARGS68K _impl_FTC_SBitCache_LookupScaler(struct FreetypeIFace *, FTC_SBitCache cache, FTC_Scaler scaler, FT_ULong load_flags, FT_UInt gindex, FTC_SBit * sbit, FTC_Node * anode);
extern FT_Error VARARGS68K _impl_FT_Get_CID_Registry_Ordering_Supplement(struct FreetypeIFace *, FT_Face face, const char* * registry, const char* * ordering, FT_Int * supplement);
extern FT_Error VARARGS68K _impl_FT_Get_CID_Is_Internally_CID_Keyed(struct FreetypeIFace *, FT_Face face, FT_Bool * is_cid);
extern FT_Error VARARGS68K _impl_FT_Get_CID_From_Glyph_Index(struct FreetypeIFace *, FT_Face face, FT_UInt glyph_index, FT_UInt * cid);
extern FT_Error VARARGS68K _impl_FT_Palette_Data_Get(struct FreetypeIFace *, FT_Face face, FT_Palette_Data * apalette);
extern FT_Error VARARGS68K _impl_FT_Palette_Select(struct FreetypeIFace *, FT_Face face, FT_UShort palette_index, FT_Color* * apalette);
extern FT_Error VARARGS68K _impl_FT_Palette_Set_Foreground_Color(struct FreetypeIFace *, FT_Face face, FT_Color foreground_color);
extern FT_Bool VARARGS68K _impl_FT_Get_Color_Glyph_Layer(struct FreetypeIFace *, FT_Face face, FT_UInt base_glyph, FT_UInt * aglyph_index, FT_UInt * acolor_index, FT_LayerIterator* iterator);
extern FT_Bool VARARGS68K _impl_FT_Get_Color_Glyph_Paint(struct FreetypeIFace *, FT_Face face, FT_UInt base_glyph, FT_Color_Root_Transform root_transform, FT_OpaquePaint* paint);
extern FT_Bool VARARGS68K _impl_FT_Get_Color_Glyph_ClipBox(struct FreetypeIFace *, FT_Face face, FT_UInt base_glyph, FT_ClipBox* clip_box);
extern FT_Bool VARARGS68K _impl_FT_Get_Paint_Layers(struct FreetypeIFace *, FT_Face face, FT_LayerIterator* iterator, FT_OpaquePaint* paint);
extern FT_Bool VARARGS68K _impl_FT_Get_Colorline_Stops(struct FreetypeIFace *, FT_Face face, FT_ColorStop* color_stop, FT_ColorStopIterator* iterator);
extern FT_Bool VARARGS68K _impl_FT_Get_Paint(struct FreetypeIFace *, FT_Face face, FT_OpaquePaint opaque_paint, FT_COLR_Paint* paint);
extern const char* VARARGS68K _impl_FT_Error_String(struct FreetypeIFace *, FT_Error error_code);
extern const char* VARARGS68K _impl_FT_Get_Font_Format(struct FreetypeIFace *, FT_Face face);
extern const char* VARARGS68K _impl_FT_Get_X11_Font_Format(struct FreetypeIFace *, FT_Face face);
extern FT_Int VARARGS68K _impl_FT_Get_Gasp(struct FreetypeIFace *, FT_Face face, FT_UInt ppem);
extern FT_Error VARARGS68K _impl_FT_New_Glyph(struct FreetypeIFace *, FT_Library library, FT_Glyph_Format format, FT_Glyph * aglyph);
extern FT_Error VARARGS68K _impl_FT_Get_Glyph(struct FreetypeIFace *, FT_GlyphSlot slot, FT_Glyph * aglyph);
extern FT_Error VARARGS68K _impl_FT_Glyph_Copy(struct FreetypeIFace *, FT_Glyph source, FT_Glyph * target);
extern FT_Error VARARGS68K _impl_FT_Glyph_Transform(struct FreetypeIFace *, FT_Glyph glyph, const FT_Matrix* matrix, const FT_Vector* delta);
extern void VARARGS68K _impl_FT_Glyph_Get_CBox(struct FreetypeIFace *, FT_Glyph glyph, FT_UInt bbox_mode, FT_BBox * acbox);
extern FT_Error VARARGS68K _impl_FT_Glyph_To_Bitmap(struct FreetypeIFace *, FT_Glyph* the_glyph, FT_Render_Mode render_mode, const FT_Vector* origin, FT_Bool destroy);
extern void VARARGS68K _impl_FT_Done_Glyph(struct FreetypeIFace *, FT_Glyph glyph);
extern void VARARGS68K _impl_FT_Matrix_Multiply(struct FreetypeIFace *, const FT_Matrix* a, FT_Matrix* b);
extern FT_Error VARARGS68K _impl_FT_Matrix_Invert(struct FreetypeIFace *, FT_Matrix* matrix);
extern FT_Error VARARGS68K _impl_FT_TrueTypeGX_Validate(struct FreetypeIFace *, FT_Face face, FT_UInt validation_flags, FT_Bytes tables[FT_VALIDATE_GX_LENGTH], FT_UInt table_length);
extern void VARARGS68K _impl_FT_TrueTypeGX_Free(struct FreetypeIFace *, FT_Face face, FT_Bytes table);
extern FT_Error VARARGS68K _impl_FT_ClassicKern_Validate(struct FreetypeIFace *, FT_Face face, FT_UInt validation_flags, FT_Bytes * ckern_table);
extern void VARARGS68K _impl_FT_ClassicKern_Free(struct FreetypeIFace *, FT_Face face, FT_Bytes table);
extern FT_Error VARARGS68K _impl_FT_Stream_OpenGzip(struct FreetypeIFace *, FT_Stream stream, FT_Stream source);
extern FT_Error VARARGS68K _impl_FT_Gzip_Uncompress(struct FreetypeIFace *, FT_Memory memory, FT_Byte* output, FT_ULong* output_len, const FT_Byte* input, FT_ULong input_len);
extern FT_Error VARARGS68K _impl_FT_Library_SetLcdFilter(struct FreetypeIFace *, FT_Library library, FT_LcdFilter filter);
extern FT_Error VARARGS68K _impl_FT_Library_SetLcdFilterWeights(struct FreetypeIFace *, FT_Library library, unsigned char * weights);
extern FT_Error VARARGS68K _impl_FT_Library_SetLcdGeometry(struct FreetypeIFace *, FT_Library library, FT_Vector sub[3]);
extern FT_ListNode VARARGS68K _impl_FT_List_Find(struct FreetypeIFace *, FT_List list, void* data);
extern void VARARGS68K _impl_FT_List_Add(struct FreetypeIFace *, FT_List list, FT_ListNode node);
extern void VARARGS68K _impl_FT_List_Insert(struct FreetypeIFace *, FT_List list, FT_ListNode node);
extern void VARARGS68K _impl_FT_List_Remove(struct FreetypeIFace *, FT_List list, FT_ListNode node);
extern void VARARGS68K _impl_FT_List_Up(struct FreetypeIFace *, FT_List list, FT_ListNode node);
extern FT_Error VARARGS68K _impl_FT_List_Iterate(struct FreetypeIFace *, FT_List list, FT_List_Iterator iterator, void* user);
extern void VARARGS68K _impl_FT_List_Finalize(struct FreetypeIFace *, FT_List list, FT_List_Destructor destroy, FT_Memory memory, void* user);
extern void VARARGS68K _impl_FT_Trace_Set_Level(struct FreetypeIFace *, const char* tracing_level);
extern void VARARGS68K _impl_FT_Trace_Set_Default_Level(struct FreetypeIFace *);
extern void VARARGS68K _impl_FT_Set_Log_Handler(struct FreetypeIFace *, FT_Custom_Log_Handler handler);
extern void VARARGS68K _impl_FT_Set_Default_Log_Handler(struct FreetypeIFace *);
extern FT_Error VARARGS68K _impl_FT_Stream_OpenLZW(struct FreetypeIFace *, FT_Stream stream, FT_Stream source);
extern FT_Error VARARGS68K _impl_FT_Get_Multi_Master(struct FreetypeIFace *, FT_Face face, FT_Multi_Master * amaster);
extern FT_Error VARARGS68K _impl_FT_Get_MM_Var(struct FreetypeIFace *, FT_Face face, FT_MM_Var* * amaster);
extern FT_Error VARARGS68K _impl_FT_Done_MM_Var(struct FreetypeIFace *, FT_Library library, FT_MM_Var * amaster);
extern FT_Error VARARGS68K _impl_FT_Set_MM_Design_Coordinates(struct FreetypeIFace *, FT_Face face, FT_UInt num_coords, FT_Long* coords);
extern FT_Error VARARGS68K _impl_FT_Set_Var_Design_Coordinates(struct FreetypeIFace *, FT_Face face, FT_UInt num_coords, FT_Fixed* coords);
extern FT_Error VARARGS68K _impl_FT_Get_Var_Design_Coordinates(struct FreetypeIFace *, FT_Face face, FT_UInt num_coords, FT_Fixed* coords);
extern FT_Error VARARGS68K _impl_FT_Set_MM_Blend_Coordinates(struct FreetypeIFace *, FT_Face face, FT_UInt num_coords, FT_Fixed* coords);
extern FT_Error VARARGS68K _impl_FT_Get_MM_Blend_Coordinates(struct FreetypeIFace *, FT_Face face, FT_UInt num_coords, FT_Fixed* coords);
extern FT_Error VARARGS68K _impl_FT_Set_Var_Blend_Coordinates(struct FreetypeIFace *, FT_Face face, FT_UInt num_coords, FT_Fixed* coords);
extern FT_Error VARARGS68K _impl_FT_Get_Var_Blend_Coordinates(struct FreetypeIFace *, FT_Face face, FT_UInt num_coords, FT_Fixed* coords);
extern FT_Error VARARGS68K _impl_FT_Set_MM_WeightVector(struct FreetypeIFace *, FT_Face face, FT_UInt len, FT_Fixed* weightvector);
extern FT_Error VARARGS68K _impl_FT_Get_MM_WeightVector(struct FreetypeIFace *, FT_Face face, FT_UInt* len, FT_Fixed* weightvector);
extern FT_Error VARARGS68K _impl_FT_Get_Var_Axis_Flags(struct FreetypeIFace *, FT_MM_Var* master, FT_UInt axis_index, FT_UInt* flags);
extern FT_Error VARARGS68K _impl_FT_Set_Named_Instance(struct FreetypeIFace *, FT_Face face, FT_UInt instance_index);
extern FT_Error VARARGS68K _impl_FT_Get_Default_Named_Instance(struct FreetypeIFace *, FT_Face face, FT_UInt * instance_index);
extern FT_Error VARARGS68K _impl_FT_Add_Module(struct FreetypeIFace *, FT_Library library, const FT_Module_Class* clazz);
extern FT_Module VARARGS68K _impl_FT_Get_Module(struct FreetypeIFace *, FT_Library library, const char* module_name);
extern FT_Error VARARGS68K _impl_FT_Remove_Module(struct FreetypeIFace *, FT_Library library, FT_Module module);
extern FT_Error VARARGS68K _impl_FT_Property_Set(struct FreetypeIFace *, FT_Library library, const FT_String* module_name, const FT_String* property_name, const void* value);
extern FT_Error VARARGS68K _impl_FT_Property_Get(struct FreetypeIFace *, FT_Library library, const FT_String* module_name, const FT_String* property_name, void* value);
extern void VARARGS68K _impl_FT_Set_Default_Properties(struct FreetypeIFace *, FT_Library library);
extern FT_Error VARARGS68K _impl_FT_Reference_Library(struct FreetypeIFace *, FT_Library library);
extern FT_Error VARARGS68K _impl_FT_New_Library(struct FreetypeIFace *, FT_Memory memory, FT_Library * alibrary);
extern FT_Error VARARGS68K _impl_FT_Done_Library(struct FreetypeIFace *, FT_Library library);
extern void VARARGS68K _impl_FT_Set_Debug_Hook(struct FreetypeIFace *, FT_Library library, FT_UInt hook_index, FT_DebugHook_Func debug_hook);
extern void VARARGS68K _impl_FT_Add_Default_Modules(struct FreetypeIFace *, FT_Library library);
extern FT_TrueTypeEngineType VARARGS68K _impl_FT_Get_TrueType_Engine_Type(struct FreetypeIFace *, FT_Library library);
extern FT_Error VARARGS68K _impl_FT_OpenType_Validate(struct FreetypeIFace *, FT_Face face, FT_UInt validation_flags, FT_Bytes * BASE_table, FT_Bytes * GDEF_table, FT_Bytes * GPOS_table, FT_Bytes * GSUB_table, FT_Bytes * JSTF_table);
extern void VARARGS68K _impl_FT_OpenType_Free(struct FreetypeIFace *, FT_Face face, FT_Bytes table);
extern FT_Error VARARGS68K _impl_FT_Outline_Decompose(struct FreetypeIFace *, FT_Outline* outline, const FT_Outline_Funcs* func_interface, void* user);
extern FT_Error VARARGS68K _impl_FT_Outline_New(struct FreetypeIFace *, FT_Library library, FT_UInt numPoints, FT_Int numContours, FT_Outline * anoutline);
extern FT_Error VARARGS68K _impl_FT_Outline_Done(struct FreetypeIFace *, FT_Library library, FT_Outline* outline);
extern FT_Error VARARGS68K _impl_FT_Outline_Check(struct FreetypeIFace *, FT_Outline* outline);
extern void VARARGS68K _impl_FT_Outline_Get_CBox(struct FreetypeIFace *, const FT_Outline* outline, FT_BBox * acbox);
extern void VARARGS68K _impl_FT_Outline_Translate(struct FreetypeIFace *, const FT_Outline* outline, FT_Pos xOffset, FT_Pos yOffset);
extern FT_Error VARARGS68K _impl_FT_Outline_Copy(struct FreetypeIFace *, const FT_Outline* source, FT_Outline * target);
extern void VARARGS68K _impl_FT_Outline_Transform(struct FreetypeIFace *, const FT_Outline* outline, const FT_Matrix* matrix);
extern FT_Error VARARGS68K _impl_FT_Outline_Embolden(struct FreetypeIFace *, FT_Outline* outline, FT_Pos strength);
extern FT_Error VARARGS68K _impl_FT_Outline_EmboldenXY(struct FreetypeIFace *, FT_Outline* outline, FT_Pos xstrength, FT_Pos ystrength);
extern void VARARGS68K _impl_FT_Outline_Reverse(struct FreetypeIFace *, FT_Outline* outline);
extern FT_Error VARARGS68K _impl_FT_Outline_Get_Bitmap(struct FreetypeIFace *, FT_Library library, FT_Outline* outline, const FT_Bitmap * abitmap);
extern FT_Error VARARGS68K _impl_FT_Outline_Render(struct FreetypeIFace *, FT_Library library, FT_Outline* outline, FT_Raster_Params* params);
extern FT_Orientation VARARGS68K _impl_FT_Outline_Get_Orientation(struct FreetypeIFace *, FT_Outline* outline);
extern FT_Error VARARGS68K _impl_FT_Get_PFR_Metrics(struct FreetypeIFace *, FT_Face face, FT_UInt * aoutline_resolution, FT_UInt * ametrics_resolution, FT_Fixed * ametrics_x_scale, FT_Fixed * ametrics_y_scale);
extern FT_Error VARARGS68K _impl_FT_Get_PFR_Kerning(struct FreetypeIFace *, FT_Face face, FT_UInt left, FT_UInt right, FT_Vector * avector);
extern FT_Error VARARGS68K _impl_FT_Get_PFR_Advance(struct FreetypeIFace *, FT_Face face, FT_UInt gindex, FT_Pos * aadvance);
extern FT_Renderer VARARGS68K _impl_FT_Get_Renderer(struct FreetypeIFace *, FT_Library library, FT_Glyph_Format format);
extern FT_Error VARARGS68K _impl_FT_Set_Renderer(struct FreetypeIFace *, FT_Library library, FT_Renderer renderer, FT_UInt num_params, FT_Parameter* parameters);
extern FT_Error VARARGS68K _impl_FT_New_Size(struct FreetypeIFace *, FT_Face face, FT_Size* size);
extern FT_Error VARARGS68K _impl_FT_Done_Size(struct FreetypeIFace *, FT_Size size);
extern FT_Error VARARGS68K _impl_FT_Activate_Size(struct FreetypeIFace *, FT_Size size);
extern FT_UInt VARARGS68K _impl_FT_Get_Sfnt_Name_Count(struct FreetypeIFace *, FT_Face face);
extern FT_Error VARARGS68K _impl_FT_Get_Sfnt_Name(struct FreetypeIFace *, FT_Face face, FT_UInt idx, FT_SfntName * aname);
extern FT_Error VARARGS68K _impl_FT_Get_Sfnt_LangTag(struct FreetypeIFace *, FT_Face face, FT_UInt langID, FT_SfntLangTag * alangTag);
extern FT_StrokerBorder VARARGS68K _impl_FT_Outline_GetInsideBorder(struct FreetypeIFace *, FT_Outline* outline);
extern FT_StrokerBorder VARARGS68K _impl_FT_Outline_GetOutsideBorder(struct FreetypeIFace *, FT_Outline* outline);
extern FT_Error VARARGS68K _impl_FT_Stroker_New(struct FreetypeIFace *, FT_Library library, FT_Stroker * astroker);
extern void VARARGS68K _impl_FT_Stroker_Set(struct FreetypeIFace *, FT_Stroker stroker, FT_Fixed radius, FT_Stroker_LineCap line_cap, FT_Stroker_LineJoin line_join, FT_Fixed miter_limit);
extern void VARARGS68K _impl_FT_Stroker_Rewind(struct FreetypeIFace *, FT_Stroker stroker);
extern FT_Error VARARGS68K _impl_FT_Stroker_ParseOutline(struct FreetypeIFace *, FT_Stroker stroker, FT_Outline* outline, FT_Bool opened);
extern FT_Error VARARGS68K _impl_FT_Stroker_BeginSubPath(struct FreetypeIFace *, FT_Stroker stroker, FT_Vector* to, FT_Bool open);
extern FT_Error VARARGS68K _impl_FT_Stroker_EndSubPath(struct FreetypeIFace *, FT_Stroker stroker);
extern FT_Error VARARGS68K _impl_FT_Stroker_LineTo(struct FreetypeIFace *, FT_Stroker stroker, FT_Vector* to);
extern FT_Error VARARGS68K _impl_FT_Stroker_ConicTo(struct FreetypeIFace *, FT_Stroker stroker, FT_Vector* control, FT_Vector* to);
extern FT_Error VARARGS68K _impl_FT_Stroker_CubicTo(struct FreetypeIFace *, FT_Stroker stroker, FT_Vector* control1, FT_Vector* control2, FT_Vector* to);
extern FT_Error VARARGS68K _impl_FT_Stroker_GetBorderCounts(struct FreetypeIFace *, FT_Stroker stroker, FT_StrokerBorder border, FT_UInt * anum_points, FT_UInt * anum_contours);
extern void VARARGS68K _impl_FT_Stroker_ExportBorder(struct FreetypeIFace *, FT_Stroker stroker, FT_StrokerBorder border, FT_Outline* outline);
extern FT_Error VARARGS68K _impl_FT_Stroker_GetCounts(struct FreetypeIFace *, FT_Stroker stroker, FT_UInt * anum_points, FT_UInt * anum_contours);
extern void VARARGS68K _impl_FT_Stroker_Export(struct FreetypeIFace *, FT_Stroker stroker, FT_Outline* outline);
extern void VARARGS68K _impl_FT_Stroker_Done(struct FreetypeIFace *, FT_Stroker stroker);
extern FT_Error VARARGS68K _impl_FT_Glyph_Stroke(struct FreetypeIFace *, FT_Glyph * pglyph, FT_Stroker stroker, FT_Bool destroy);
extern FT_Error VARARGS68K _impl_FT_Glyph_StrokeBorder(struct FreetypeIFace *, FT_Glyph * pglyph, FT_Stroker stroker, FT_Bool inside, FT_Bool destroy);
extern void VARARGS68K _impl_FT_GlyphSlot_Embolden(struct FreetypeIFace *, FT_GlyphSlot slot);
extern void VARARGS68K _impl_FT_GlyphSlot_AdjustWeight(struct FreetypeIFace *, FT_GlyphSlot slot, FT_Fixed xdelta, FT_Fixed ydelta);
extern void VARARGS68K _impl_FT_GlyphSlot_Oblique(struct FreetypeIFace *, FT_GlyphSlot slot);
extern void VARARGS68K _impl_FT_GlyphSlot_Slant(struct FreetypeIFace *, FT_GlyphSlot slot, FT_Fixed xslant, FT_Fixed yslant);
extern FT_Fixed VARARGS68K _impl_FT_Sin(struct FreetypeIFace *, FT_Angle angle);
extern FT_Fixed VARARGS68K _impl_FT_Cos(struct FreetypeIFace *, FT_Angle angle);
extern FT_Fixed VARARGS68K _impl_FT_Tan(struct FreetypeIFace *, FT_Angle angle);
extern FT_Angle VARARGS68K _impl_FT_Atan2(struct FreetypeIFace *, FT_Fixed x, FT_Fixed y);
extern FT_Angle VARARGS68K _impl_FT_Angle_Diff(struct FreetypeIFace *, FT_Angle angle1, FT_Angle angle2);
extern void VARARGS68K _impl_FT_Vector_Unit(struct FreetypeIFace *, FT_Vector* vec, FT_Angle angle);
extern void VARARGS68K _impl_FT_Vector_Rotate(struct FreetypeIFace *, FT_Vector* vec, FT_Angle angle);
extern FT_Fixed VARARGS68K _impl_FT_Vector_Length(struct FreetypeIFace *, FT_Vector* vec);
extern void VARARGS68K _impl_FT_Vector_Polarize(struct FreetypeIFace *, FT_Vector* vec, FT_Fixed * length, FT_Angle * angle);
extern void VARARGS68K _impl_FT_Vector_From_Polar(struct FreetypeIFace *, FT_Vector* vec, FT_Fixed length, FT_Angle angle);
extern FT_Error VARARGS68K _impl_FT_Get_WinFNT_Header(struct FreetypeIFace *, FT_Face face, FT_WinFNT_HeaderRec * aheader);
extern FT_Int VARARGS68K _impl_FT_Has_PS_Glyph_Names(struct FreetypeIFace *, FT_Face face);
extern FT_Error VARARGS68K _impl_FT_Get_PS_Font_Info(struct FreetypeIFace *, FT_Face face, PS_FontInfo afont_info);
extern FT_Error VARARGS68K _impl_FT_Get_PS_Font_Private(struct FreetypeIFace *, FT_Face face, PS_Private afont_private);
extern FT_Long VARARGS68K _impl_FT_Get_PS_Font_Value(struct FreetypeIFace *, FT_Face face, PS_Dict_Keys key, FT_UInt idx, void * value, FT_Long value_len);
extern void* VARARGS68K _impl_FT_Get_Sfnt_Table(struct FreetypeIFace *, FT_Face face, FT_Sfnt_Tag tag);
extern FT_Error VARARGS68K _impl_FT_Load_Sfnt_Table(struct FreetypeIFace *, FT_Face face, FT_ULong tag, FT_Long offset, FT_Byte* buffer, FT_ULong* length);
extern FT_Error VARARGS68K _impl_FT_Sfnt_Table_Info(struct FreetypeIFace *, FT_Face face, FT_UInt table_index, FT_ULong * tag, FT_ULong * length);
extern FT_ULong VARARGS68K _impl_FT_Get_CMap_Language_ID(struct FreetypeIFace *, FT_CharMap charmap);
extern FT_Long VARARGS68K _impl_FT_Get_CMap_Format(struct FreetypeIFace *, FT_CharMap charmap);

